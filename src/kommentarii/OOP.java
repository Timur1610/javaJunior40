package kommentarii;

public class OOP {
    // OOP - включает в себя 4 принципа:
    // 1) Инкапсуляция - модификаторы доступа private, public, *пусто*, protected. То есть правильная расстановка модификаторов доступа
    // 2) Наследование - берем класс родителя и забираем все, что есть у родителя к себе
    // 3) Полиморфизм - это свойство работы с типами данных, как с одним и тем же типом, но в то же самое время реализация по-разному
    // 4) Абстрактность - это метод, который объявлен, но в нём не описана логика, то есть метод не реализован.
    // В таком случае нет фигурных скобок, а после объявления метода сразу идет точка с запятой.

    /**
     * Структура программы ООП
     * 1 - Поля класса, то что нам важно относительно этого объекта
     *
     * 2 - Конструкторы - особый метод, который вызывается после слова NEW
     * и рождает новый объект (именно он является тем, кто создает новый объект)
     * Структура написания конструктора:
     * - модификатор доступа public (для того, чтобы можно было вызвать его где-угодно)
     * - указывается название класса - и это же будет название конструктора - Tovar
     * - круглые скобки(входящие параметры) и тело
     *
     * 3 - Генерируем методы Getter и Setter на все поля. Отображение названия или цены заведомо без меня.
     * Также после Getter и Setter можем написать свои методы, если это необходимо
     *
     * 4 - генерируем equal и hashCode на все поля (переопределяем их под себя). При необходимости переопределяем метод toString
     * также на все поля
     *
     *
     * */
}
